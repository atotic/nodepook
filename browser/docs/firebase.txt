Book operations
- list all mine (order by lastModified). Should be able to display info without loading the entire book
- book sides need to be ordered
Book props
- title
- createdAt
- modifiedOn
- width/height
- sides: first side is cover, last side is back cover. Sortable by priority. Priorities are floats
  https://groups.google.com/forum/#!searchin/firebase-talk/sorting/firebase-talk/UUocZUZJlRU/hERfAZW4DG8J

Side props
- left/right, points to page
- type: front-cover/inside/back-cover



Schema:
/books/$userId/$bookId
/photos/$userId/$photoId
/pages/$bookId/$pageId



# Firebase security definitils
# https://github.com/firebase/blaze_compiler
functions:            #reusable boolean functions
  - createOnly():      next.exists() && !prev.exists()
  - deleteOnly():      prev.exists() && !next.exists()
  - createOrDelete():  createOnly() || deleteOnly()
  - isUser(userId):    auth.uid === userId
  - ownerIdCreate():   !prev.exists() && next[ownerId] === auth.uid
  - ownerIdRead():     prev.exists() && prev[ownerId] === auth.uid
  - isLoggedIn():      auth !== null
schema:
  type: object
  properties:
    users: # the users subtree is a collection of users
      type: object
      $userId:
        type: object
        properties:
          account:
            type: object
            properties:
              email: { type: string }
              firstName: { type: string }
              lastName: { type: string }
              street1: { type: string }
              street2: { type: string }
              city: { type: string }
              state: { type: string }
              zip: { type: string }
            additionalProperties: false
          photos:
            type: object
            $photoId:
              type: boolean
          books:
            type: object
        additionalProperties: false
    photos:
      type: object
      $photoId:
        type: object
        properties:
          ownerId: { type: string }

access:
  - location: users
    read: isLoggedIn()
    write: isLoggedIn()
  - location: users/$userId/account
    read: isUser($userId)
    write: isUser($userId)
  - location: users/$userId/photos
    read: isUser($userId)
    write: isUser($userId)
  - location: photos/$photoId
    read: ownerIdRead()
    write: ownerIdCreate() || ownerIdRead()



what do routes look like?

/ - index.jade
/editor - user/account.jade
/photo
  POST - uploads a file, need to secure this, generate token on client
/resize/:s3id~size  - resizes 
/book/:bookId/generatePdf
/book/:bookId/placeOrder

SCHEMA TALK
primary objects: users, books, photos
queries:
  photos: all by user
  photos: all by book

photos/books are tricky to design
need security, sharing

all x by user can be answered by:
a) keeping list of ids under user
b) keeping priority

SCHEMA


{ id: 42, provider: 'password', uid: 'simplelogin:4' }
 /photos/-JXDyWp
 { createdAt: "asdfasdf", owner: "simplelogin:4" }

/users/simplelogin:4/photos/-JXDyWp


book
  book-mold
  photos
  pages

page
  page-mold
  assets (photo|text|widget)

asset
 top,left,width,height,zindex
 rotate
 frame
 
photo-asset
  photoId
  focalPoint
  zoom
  
text-asset
  content
  
widget-asset

photo
  createdAt
  md5
  s3id
  displayName // exifData
  width
  height
  dateTaken
  caption
  latitude
  longitude
  
molds:

questions:
 - sharing: firebase access control is defined over object hierarchy
   giving someone access to object a: give access  
db usage:
 - what is a page, how to display it
 - page dom generated dynamically from js
 



